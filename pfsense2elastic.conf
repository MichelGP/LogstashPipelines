input {
  udp {
    type => syslog
    port => 1514
  }
}

filter {
  mutate {
    add_tag => [ "PFSense" ]
  }
}

## Main parsing of syslog message
filter {
  if "PFSense" in [tags] {
    grok {
      match => { "message" => "(<%{INT:log_entry}>)?%{SYSLOGTIMESTAMP:syslog_timestamp}( %{SYSLOGHOST:syslog_hostname})? %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM  dd HH:mm:ss" ]
      locale => "en"
    }
    if !("_grokparsefailure" in [tags]) {
      mutate {
        replace => [ "source_host", "%{syslog_hostname}" ]
        replace => [ "@message", "%{syslog_message}" ]
      }
    }
    mutate {
      remove_field => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
    }
  }
}

## Get source prog (firewall, vpn etc)
filter {
  if "PFSense" in [tags] {
    grok {
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
    }
    if [prog] {
      if [prog] =~ /filterlog/ {
        mutate {
          add_tag => [ "PFSenseFirewall" ]
        }
      } else if [prog] =~ /openvpn/ {
        mutate {
          add_tag => [ "PFSenseVPN" ]
        }
      } else if [prog] =~ /nginx/ {
        mutate {
          add_tag => [ "PFSenseNginx" ]
        }
      } else if [prog] =~ /php-fpm/ {
        mutate {
          add_tag => [ "PFSensePhpFpm" ]
        }
      } else if [prog] =~ /sshguard/ {
        mutate {
          add_tag => [ "PFSenseSshGuard" ]
        }
      }
    }
  }
}

## Add Geo info to firewall logging
filter {
  if "PFSenseFirewall" in [tags] {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => {
        "message" => [ "%{PFSENSE_LOG_DATA}%{PFSENSE_IP_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}",
                       "%{PFSENSE_LOG_DATA}%{PFSENSE_IPv4_SPECIFIC_DATA_ECN}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}" ]
      }
    }
    # Assuming proto, src_ip, dest_ip fields are extracted by the grok patterns above
    mutate {
      lowercase => [ "proto" ]
    }
    geoip {
      source => "src_ip"
      target => "src_location" # Customize this field name as needed
      add_tag => [ "GeoIP_src" ]
    }
    geoip {
      source => "dest_ip"
      target => "dest_location" # Customize this field name as needed
      add_tag => [ "GeoIP_dest" ]
    }
    mutate {
      add_tag => [ "GeoMatched" ]
    }
  }
}

## Parse VPN logging
filter {
  if "PFSenseVPN" in [tags] {
    grok {
      match => {
        "message" => "<%{POSINT:priority}>%{MONTH:log_month} +%{MONTHDAY:log_day} %{TIME:log_time} %{WORD:program}\[%{POSINT:pid}\]: %{DATA:server_info} user '%{USERNAME:user}' address '%{IP:client_ip}:%{NUMBER:client_port}' - %{WORD:connection_status}"
      }
      # Tag the event if grok parsing fails
      tag_on_failure => [ "_grokparsefailure_vpn" ]
    }

    # Check if grok parsing was successful
    if "_grokparsefailure_vpn" not in [tags] {
      mutate {
        add_tag => [ "VPNMatched" ]
      }
      geoip {
        source => "client_ip"
        target => "vpn_client_geo"
        add_tag => [ "VPNClientGeo" ]
      }
    } else {
      # Actions for logs that do not match the grok pattern
      # For example, you could add a tag or write to a different log file
      mutate {
        add_tag => [ "VPNUnmatched" ]
        # You can also add additional logic here for unmatched logs
      }
    }
  }
}

output {
  if "GeoMatched" in [tags]{
    elasticsearch {
      hosts => [ "https://elasticsearch:9200" ]
      index => "logstash-pfsense-geo-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "..."
      ssl => true
      cacert => "/etc/logstash/config/certs/http_ca.crt"
    }
  } else if "PFSenseVPN" in [tags] {
      elasticsearch {
      hosts => [ "https://elasticsearch:9200" ]
      index => "logstash-pfsense-vpn-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "..."
      ssl => true
      cacert => "/etc/logstash/config/certs/http_ca.crt"
    }
  } else {
      elasticsearch {
      hosts => [ "https://elasticsearch:9200" ]
      index => "logstash-pfsense-other-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "..."
      ssl => true
      cacert => "/etc/logstash/config/certs/http_ca.crt"
    }
  }
  if "PFSenseVPN" in [tags] {
    file {
      codec => rubydebug
      path => "/var/log/logstash/pfsense2elastic.log"
      id => "file_output"
    }
  }
}
